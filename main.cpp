#include <iostream>
#include <string>
#include "Utils.h"
#include "Univer.h"
#include <Windows.h>

using namespace std;

void menu();
void input_data();

Univer *u;

int main()
{
	SetConsoleOutputCP(1251);
	SetConsoleCP(1251);
	setlocale(LC_ALL, "Russian");

	u = new Univer("MIREA");

	while (1)
		menu();

	return 0;
}


void menu() {
	string n;

menu_n:
	if (u->N == 0) {
		cout << "!!!! Чтобы начать использовать программу, необходимо сначала за-грузить студентов при помощи первого пункта меню !!!!" << endl;
	}

	cout << "Введите номер действия, которое хотите совершить: "<<endl;
	cout << "1. Ввести/добавить студентов" << endl;
	cout << "2. Удалить студента" << endl;
	cout << "3. Показать всех студентов в университете" << endl;
	cout << "4. Изменить информацию о студенте" << endl;
	cout << "5. Показать выборку (вариант 10)" << endl;
	cout << "0. Выход" << endl;
	cout << "> ";

	getline(cin, n);


	if (!isValidInt(n) || (stoi(n) > 5 || stoi(n) < -1)) {
		cls;
		goto menu_n;
	}


	// Свитч по пунктам меню. Определяет, что нужно сделать
	switch (stoi(n))
	{
	case 0: { // 0 = выход из программы
		// очистка консоли
		cls;
		// удалить объект "университет"
		delete u;
		// выйти с кодом 0
		exit(0);
	}
	case 1: { // 1 = добавить или ввести студентов
		// очистка консоли
		cls;

		// проверить, существует ли файл базы данных
		if (fileExists("db.bin")) {
			// место, в которое будет передано управление в случае неверного вво-да
		menu_n1:
			// Показать доступные действия
			cout << "1. Загрузить данные из файла (db.bin)" << endl;
			cout << "2. Ввести студентов с клавиатуры" << endl;
			cout << "> ";
			// ввод номера действия
			getline(cin, n);
			// проверка правильности ввода
			// ввод является числом, ввод попадает в диапазон пунктов меню
			if (!isValidInt(n) || (stoi(n) > 2) || stoi(n) < 1) {
				// неверный ввод =>
				// очистка консоли
				cls;
				// возврат к началу ввода
				goto menu_n1;
			}

			cls;
			// если введена единица
			if (n == "1") // загрузить данные из файла
				u->loadAll();
			else { // иначе начать ввод с клавиатуры
				input_data();
			}
		}
		else { // если файл не найден, то сразу перейти ко вводу с клавиатуры
			cout << "Файл не найден" << endl;
			input_data();
		}
		break;
	}
	case 2: {
		// Проверить, есть ли вообще студенты в университете
		if (u->N == 0) {
			cls;
			// Если нет - вывести ошибку и вернуться в меню
			cout << NOSTUDS << endl;
			system("pause"); cls;
			break;
		}

		// переменная для хранения введенного пользователем номера зачетки
		string zach;
		// место, в которое будет передано управление в случае неверного ввода
	zenter:
		cout << "Введите номер зачетной книжки студента, которого хотите удалить из университета: [0=выход в меню] > ";
		// ввести номер зачётной книжки
		getline(cin, zach);
		// проверить, не решил ли пользователь вернуться в меню
		if (zach == "0") { cls; break; }

		// проверить, существует ли студент с такой зачётной книжкой
		if (!u->hasStudent(zach)) {
			// если нет - вывести ошибку и снова вернуться ко вводу номера
			cout << NOSTUDS << endl;
			goto zenter;
		}

		// если все строки выше пройдены - значит номер зачетки введен верно
		// значит можно вызвать функцию удаления и сохранить измененный список в файл
		u->removeStudent(zach);
		u->saveAll();
		cls;
		break;
	}
	case 3:{ // 3=показать всех студентов
		cls;
		// Вызов функции показа всех студентов в университете
		u->showStudents();
		// Приостановить выполнение до нажатия любой клавиши
		system("pause");
		cls;
		break;
	}
	case 4: { // 4=изменить информацию о студенте
		// Проверить, есть ли вообще студенты в университете
		if (u->N == 0) {
			cls;
			// Если нет - вывести ошибку и вернуться в меню
			cout << NOSTUDS << endl;
			system("pause"); cls;
			break;
		}

		// Переменная для хранения введенного номера зачётной книжки
		string zn;
		cout << "Введите номер зачётной книжки > ";

		// место, в которое будет передано управление в случае неверного ввода
	checkZn:
		// ввод номера зачетки
		getline(cin, zn);
		// если пользователь решил выйти в меню
		if (zn == "0") {
			cls;
			break;
		}
		// проверка наличия студента с такой зачёткой в университете
		if (!u->hasStudent(zn)) {
			// если нет - выводим ошибку и возвращаемся к началу ввода
			cout << "Не найдено студентов с таким номером зачетки, попробуйте снова [0=выход в меню] > ";
			goto checkZn;
		}
		cls;
		// вызвать форму редактирования из класса "университет", передав в аргумент номер зачётки
		u->showStudentChangeDialog(zn);
		// после редактирования сохранить всё в файл
		u->saveAll();
		break;
	}

	case 5: {
		// Проверить, есть ли вообще студенты в университете
		if (u->N == 0) {
			cls;
			// Если нет - вывести ошибку и вернуться в меню
			cout << NOSTUDS << endl;
			system("pause"); cls;
			break;
		}


		u->var10query();

		// приостановить выполнение программы до нажатия любой клавиши, чтобы дать
		// пользователю возможность прочитать вывод
		system("pause");
		cls;
		break;
	}
	default:
		break;
	}
}
void input_data() {
	// переменная для хранения введенного числа студентов
	string scount;

	// место, в которое будет передано управление в случае неверного ввода
students_count_input:
	cout << "Введите кол-во студентов > ";
	// ввод кол-ва студентов
	getline(cin, scount);
	// проверка ввода, он должен быть целым положительным числом
	if (!isValidInt(scount)) {
		cls;
		cout << INVINP << endl;
		goto students_count_input;
	}


	// счётчик от единицы до введенного числа+1
	// функция stoi(str) преобразует строку в число
	// если строка содержит верное число, иначе - падение
	// в данном случае верность введенного числа проверена выше
	for (int i = 1;i < stoi(scount) + 1;i++) {
		// место, в которое будет передано управление в случае неверного ввода
	sstart: clean;
		cout << "------------------ Студент [№" << i << "]: ---------------------" << endl;
		cout << "ФИО, разделенные пробелами > ";
		// переменные для хранения различного ввода
		string sname, fname, mname, group, zach_num, kaf, fac, bdate, y, gender;
		// объекты класса "дата", используются для хранения дат
		Date bday, jdate;

		// ввод ФИО, разделенных пробелами
		cin >> sname;
		cin >> fname;
		cin >> mname;
		// проверка введенных строк на наличие спец. символов, которых не должно быть в ФИО
		if (!checkSpec(sname, 0) || !checkSpec(fname, 0) || !checkSpec(mname, 0)) {
			// в случае неверного ввода - вывод ошибки и возврат к началу ввода
			cout << CHR_ERR << endl;
			system("pause");
			cls;
			goto sstart;
		}
		clean;

		// место, в которое будет передано управление в случае неверного ввода
	gender_input:
		cout << "Пол [Ж,М] > ";
		// ввод пола студента
		getline(cin, gender);
		// проверка ввода
		if ((strCase(gender,0) != "ж") && (strCase(gender, 0) != "м")) {
			cout << INVINP << endl;
			goto gender_input;
		}

		gender = (strCase(gender, 0) == "м" ? "1" : "0");

		// место, в которое будет передано управление в случае неверного ввода
	bdate_input:
		cout << "Дата рождения {дд.мм.ГГГГ} > ";
		// ввод даты рождения в указанном формате
		getline(cin, bdate);
		// проверка правильности ввода внутренней функцией класса даты
		if (!bday.isValid(parseDotDate(bdate))) {
			cout << INVINP << endl;
			goto bdate_input;
		}

		// если всё верно - присвоить значение переменной даты рождения
		bday = parseDotDate(bdate);

		// место, в которое будет передано управление в случае неверного ввода
	jdate_input:
		cout << "Год поступления {ГГГГ} > ";
		// ввод года поступления
		getline(cin, y);
		// проверка значения года на соответствие правилам
		if (!isValidInt(y) || stoi(y) < 0 || stoi(y) > 9999 || stoi(y) <= bday.year) {
			cout << INVINP << endl;
			goto jdate_input;
		}

		jdate.year = stoi(y);

		// место, в которое будет передано управление в случае неверного ввода
	gri:
		cout << "Группа > ";
		// ввод группы студента
		getline(cin, group);
		// проверка группы на наличие запрещенных символов
		if (!checkSpec(group, 1)) {
			cout << CHR_ERR << endl;
			goto gri;
		}

		// место, в которое будет передано управление в случае неверного ввода
	znum:
		cout << "Номер зачётки > ";
		// ввод номера зачётки
		getline(cin, zach_num);
		if (!checkSpec(zach_num, 1) || u->hasStudent(zach_num)) {
			cout << "Введённый вами номер зачётной книжки уже существует или со-держит недопустимые символы!" << endl;
			goto znum;
		}


		cout << "Кафедра > ";
		// ввод кафедры, она может содержать любые символы, проверки нет
		getline(cin, kaf);
		// обрезать лишние пробелы с конца и начала строки (на случай копирования)
		kaf = trim(kaf);

		cout << "Факультет > ";
		// ввод факультета, он может содержать любые символы, проверки нет
		getline(cin, fac);
		// обрезать лишние пробелы с конца и начала строки (на случай копирования)
		fac = trim(fac);

		// воздаём объект "зачётка" и начинаем его заполнять
		Zachetka* z = new Zachetka(zach_num);
		// всего 12 семестров, в каждом из них может быть сессия, проходимся по
		// всем семестрам, но учитываем ограничение на 9 сессий
		for (int s = 1;s <= 12;s++) {
			cls;
			cout << "------------------ Семестры, предметы, оценки ---------------------" << endl;
			cout << "Вы можете ввести 9 сессий и по 10 предметов для каждой из них:" << endl;
			cout << "	[" << to_string(s) << "] семестр. Предметы [0=нет сес-сии, 1=сессия без предметов]: " << endl;
			// создаём объект "семестр"
			Semestr* sem = new Semestr();

			// так как предметов может быть 10, то и цикл используем от 1 до 10 включительно
			for (int j = 1;j <= 10;j++) {
				// переменные для хранения вводимых значений
				string stitle, mark;
			tcheck:
				cout << "		[" << j << "] Название предмета [0=конец ввода предметов] > ";
				// ввод названия
				getline(cin, stitle);
				// проверка, не желает ли пользователь прекратить ввод
				if (stitle == "0")
					break;
				// проверка, если введена пустая сессия
				if (stitle == "1") {
					// создать объект "предмет" для отметки пустого семест-ра
					Subj* s = new Subj("0subj~~", -1);
					// добавить предмет в семестр
					sem->addSubj(s);
					break;
				}
				// проверка, не существует ли такого предмета в семестре
				if (sem->hasSubj(stitle) || stitle=="") {
					cout << "Предмет с таким названием уже существует или неверно введено название!" << endl;
					goto tcheck;
				}

			mark_input:
				cout << "Оценка:  (1=пересдача, 2-5=оценка)" << endl;
				getline(cin, mark);
				if (!isValidInt(mark) || (stoi(mark) < 1 || stoi(mark) > 5)) {
					cout << INVINP << endl;
					goto mark_input;
				}

				// создать объект "предмет" с заданным названием и оценкой
				Subj* s = new Subj(stitle, stoi(mark));
				// добавить предмет в семестр
				sem->addSubj(s);
			}
			// добавить семестр в зачётку
			z->addSem(sem);
		}
		// создать объект "студент" с введенными данными и зачёткой
		Student* is = new Student(sname, fname, mname, stoi(gender), bday, group, fac, kaf, jdate, z);
		// добавить студента в университет
		u->addStudent(is);
		cls;
		// сохранить всё в файл
		u->saveAll();
	}
	cls;
}
